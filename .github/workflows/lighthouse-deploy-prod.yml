# This file was auto-generated by the Firebase CLI
# https://github.com/firebase/firebase-tools

name: Deploy to Firebase Hosting on merge
on:
  push:
    branches:
      - better
env:
  PNPM_VERSION: '9.1.4'
  env_var: 'dev'

jobs:
  lighthouse-audit:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node-version: [22]
    steps:
      - name: Audit URLs using Lighthouse
        id: lighthouse_audit
        uses: treosh/lighthouse-ci-action@v7
        with:
            # add as many urls here as you wish to audit
            # prefixed by the preview-url
            urls: |
                https://testing-40917.web.app/#/
            budgetPath: '.github/lighthouse/budget.json'
            uploadArtifacts: true
            temporaryPublicStorage: true
            runs: 3

      - name: Format lighthouse result
        id: lighthouse_result
        if: ${{ always() }}
        uses: actions/github-script@v4
        with:
            github-token: ${{secrets.GITHUB_TOKEN}}
            script: |
                const links = ${{ steps.lighthouse_audit.outputs.links }}
                const results = (${{ steps.lighthouse_audit.outputs.manifest }}).filter(result => result.isRepresentativeRun);

                const score = res => res >= 90 ? 'üü¢' : res >= 50 ? 'üü†' : 'üî¥';

                const comment = results.map((result) => {
                  const summary = result.summary;
                  const url = result.url;

                  return `
                  üåé [${url}](${url})
                  ‚ö°Ô∏è [Lighthouse report](${links[url]})

                  | Category | Score |
                  | --- | --- |
                  ${Object.keys(summary).map((key) => {
                    const percentage = Math.round(summary[key] * 100);
                    return `| ${score(percentage)} ${key} | ${percentage} |`;
                  }).join('\n')}

                  `;
                }).join('---');

                core.setOutput("comment", comment);
      - name: Format budget result
        id: budget_result
        if: ${{ always() }}
        uses: actions/github-script@v4
        with:
            github-token: ${{secrets.GITHUB_TOKEN}}
            script: |
                const assertions = ${{ steps.lighthouse_audit.outputs.assertionResults }};
                if (!assertions.length) {
                  core.setOutput("comment", '‚úÖ Budget met, nothing to see here');
                } else {
                  const comment = assertions.map((result) => {
                    return `
                ‚ùå **${result.auditProperty || ''}.${result.auditId}** failure on [${result.url}](${result.url})

                *${result.auditTitle}* - [docs](${result.auditDocumentationLink})

                | Actual | Expected |
                | --- | --- |
                | ${result.actual} | ${result.operator} ${result.expected} |
                `;
                  }).join('---');

                  core.setOutput("comment", comment);
                }
      - name: Add Lighthouse comment to PR
        id: lighthouse_comment_to_pr
        if: ${{ always() }}
        uses: marocchino/sticky-pull-request-comment@v1
        with:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            number: ${{ github.event.pull_request.number }}
            header: lighthouse
            message: |
                ${{ steps.lighthouse_result.outputs.comment }}
      - name: Add Budget comment to PR
        id: budget_comment_to_pr
        if: ${{ always() }}
        uses: marocchino/sticky-pull-request-comment@v1
        with:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            number: ${{ github.event.pull_request.number }}
            header: budget
            message: |
                ${{ steps.budget_result.outputs.comment }}            